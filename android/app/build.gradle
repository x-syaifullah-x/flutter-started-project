def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty("flutter.sdk")
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = build_versions.code
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = build_versions.name
}

apply plugin: "com.android.application"
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdk build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.example.started"
        minSdk build_versions.min_sdk
        targetSdk build_versions.target_sdk
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//
        resConfigs "en"

        ndk {
            abiFilters "arm64-v8a" //, "armeabi-v7a", "x86_64"
        }

//        externalNativeBuild {
//            cmake {
//                cppFlags "
//            }
//        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    ndkVersion = "$vNdk"
//
//    externalNativeBuild {
//        cmake {
//            path file("src/main/cpp/CMakeLists.txt")
//            version "3.18.1"
//        }
//    }

    signingConfigs {
//        debug {
//            def store_file = file("$rootDir/key_store/debug")
//            storeFile store_file
//            storePassword "android"
//            keyAlias "androiddebugkey"
//            keyPassword "android"
//        }
//
//        release {
//            def store_file = file("$rootDir/key_store/release")
//            storeFile store_file
//            storePassword "android"
//            keyAlias "androiddebugkey"
//            keyPassword "android"
//        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
        }

        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        exclude "META-INF/**"
        exclude "okhttp3/**"
        exclude "kotlin/**"
        exclude "org/**"
        exclude "**.properties"
        exclude "**.bin"
        exclude "kotlin-tooling-metadata.json"
    }
}

flutter {
    source "../.."
}
